name: Build, Test, Push Docker, Provision Infra, Deploy

on:
  push:
    tags:
      - '*'   # Run on every tag push
  workflow_dispatch:  # Allow manual trigger

jobs:
  build-test-docker:
    runs-on: ubuntu-latest
    env:
      PROJECT_PATH: mvc-default-application
      DOCKER_IMAGE: ${{ secrets.DOCKER_HUB_USERNAME }}/mvc-default-application
      DOTNET_VERSION: '9.0.x'
    outputs:
      tag_version: ${{ steps.extract_version.outputs.tag_version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore ${{ env.PROJECT_PATH }}

      - name: Build project
        run: dotnet build ${{ env.PROJECT_PATH }} --configuration Release --no-restore

      - name: Run tests
        run: dotnet test ${{ env.PROJECT_PATH }} --configuration Release --no-build --verbosity normal

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

      # - name: Set up JDK 17
      #   uses: actions/setup-java@v4
      #   with:
      #     java-version: 17
      #     distribution: 'zulu' Alternative distribution options are available.
      
      # - uses: actions/checkout@v4
      #   with:
      #     fetch-depth: 0  Shallow clones should be disabled for a better relevancy of analysis

      # - name: Cache SonarQube Cloud packages
      #   uses: actions/cache@v4
      #   with:
      #     path: ~\sonar\cache
      #     key: ${{ runner.os }}-sonar
      #     restore-keys: ${{ runner.os }}-sonar

      # - name: Cache SonarQube Cloud scanner
      #   id: cache-sonar-scanner
      #   uses: actions/cache@v4
      #   with:
      #     path: .\.sonar\scanner
      #     key: ${{ runner.os }}-sonar-scanner
      #     restore-keys: ${{ runner.os }}-sonar-scanner

      # - name: Install SonarQube Cloud scanner
      #   if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
      #   shell: powershell
      #   run: |
      #     New-Item -Path .\.sonar\scanner -ItemType Directory
      #     dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner

      # - name: Build and analyze
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #   shell: powershell
      #   run: |
      #     .\.sonar\scanner\dotnet-sonarscanner begin /k:"frzmohammadali-org_mvc-default-application" /o:"frzmohammadali-org" /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
      #     dotnet build
      #     .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Extract version from tag
        id: extract_version
        run: echo "tag_version=${GITHUB_REF##*/}" >> $GITHUB_OUTPUT

      - name: Build Docker image
        run: |
          docker build -t ${{ env.DOCKER_IMAGE }}:${{ steps.extract_version.outputs.tag_version }} -t ${{ env.DOCKER_IMAGE }}:latest -f ${{ env.PROJECT_PATH }}/Dockerfile ./${{ env.PROJECT_PATH }}

      - name: Push Docker images
        run: |
          docker push ${{ env.DOCKER_IMAGE }}:${{ steps.extract_version.outputs.tag_version }}
          docker push ${{ env.DOCKER_IMAGE }}:latest

      # ---- EMAIL NOTIFICATIONS ----
      # - name: Send success email
      #   if: success()
      #   uses: dawidd6/action-send-mail@v3
      #   with:
      #     server_address: ${{ secrets.SMTP_SERVER }}
      #     server_port: ${{ secrets.SMTP_PORT }}
      #     username: ${{ secrets.SMTP_USERNAME }}
      #     password: ${{ secrets.SMTP_PASSWORD }}
      #     subject: "[+] GitHub Actions - Build Success [${{ github.repository }}]"
      #     to: mohammadali.forou@hcltech.com
      #     from: GitHub Actions <noreply@github.com>
      #     body: |
      #       The GitHub Actions workflow for repository **${{ github.repository }}**
      #       completed successfully on ref **${{ github.ref_name }}**.

      # - name: Send failure email
      #   if: failure()
      #   uses: dawidd6/action-send-mail@v3
      #   with:
      #     server_address: ${{ secrets.SMTP_SERVER }}
      #     server_port: ${{ secrets.SMTP_PORT }}
      #     username: ${{ secrets.SMTP_USERNAME }}
      #     password: ${{ secrets.SMTP_PASSWORD }}
      #     subject: "[-] GitHub Actions - Build Failed [${{ github.repository }}]"
      #     to: mohammadali.forou@hcltech.com
      #     from: GitHub Actions <noreply@github.com>
      #     body: |
      #       The GitHub Actions workflow for repository **${{ github.repository }}**
      #       failed on ref **${{ github.ref_name }}**.
      #       Please check the logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

  terraform-apply:
    name: Terraform Plan & Apply
    runs-on: ubuntu-latest
    environment: production-deploy   # Require manual approval
    outputs:
      vm_ip: ${{ steps.set_outputs.outputs.vm_ip }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.5.7'

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Terraform Init
        working-directory: terraform
        run: terraform init

      - name: Terraform Plan
        working-directory: terraform
        run: terraform plan -var="ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}" -var="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" -out=tfplan
        continue-on-error: true

      - name: Terraform Apply
        working-directory: terraform
        run: terraform apply -auto-approve -var="ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}" -var="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}"

      - name: Get VM IP
        id: set_outputs
        working-directory: terraform
        run: |
          VM_IP=$(terraform output vm_public_ip | cut -d':' -f1 | tr -d '\r\n' | grep -oP '"\K[^"]+')
          echo "VM_IP=$VM_IP"
          echo "vm_ip=$VM_IP" >> $GITHUB_OUTPUT

      # Save state for destroy workflow
      - name: Upload Terraform State
        uses: actions/upload-artifact@v4
        with:
          name: terraform-state
          path: |
            ./terraform/.terraform
            ./terraform/.terraform.lock.hcl
            ./terraform/terraform.tfstate

  terraform-destroy:
    needs: terraform-apply
    name: Terraform Destroy
    runs-on: ubuntu-latest
    environment: production-destroy   # Require manual approval
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.5.7'

      # Restore state from apply workflow
      - name: Download Terraform State
        uses: actions/download-artifact@v4
        with:
          name: terraform-state
          path: ./terraform

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Terraform Init
        working-directory: terraform
        run: terraform init

      - name: Terraform Destroy
        working-directory: terraform
        run: terraform destroy -auto-approve -var="ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}" -var="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}"

  deploy-to-minikube:
    name: Deploy to Minikube
    runs-on: ubuntu-latest
    needs: [build-test-docker, terraform-apply]
    environment: production-deploy   # Require manual approval
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Prepare SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Deploy via SSH
        env:
          VM_IP: ${{ needs.terraform-apply.outputs.vm_ip }}
          IMAGE: ${{ secrets.DOCKER_HUB_USERNAME }}/mvc-default-application:${{ needs.build-test-docker.outputs.tag_version }}
          ADMIN_USER: ${{ secrets.TF_ADMIN_USERNAME || 'azureuser' }}
        run: |
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ./k8s/* $ADMIN_USER@$VM_IP:/tmp/
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa $ADMIN_USER@$VM_IP bash -s <<EOF
              set -e
              IMAGE="${IMAGE}"
              sed -i "s|IMAGE_PLACEHOLDER|$IMAGE|g" /tmp/deployment.yaml
              kubectl apply -f /tmp/deployment.yaml
              kubectl apply -f /tmp/service.yaml
              kubectl rollout status deployment/mvc-app --timeout=120s
              kubectl get svc mvc-app-service -o wide
          EOF